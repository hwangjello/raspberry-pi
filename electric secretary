from __future__ import print_function
import time
import RPi.GPIO as GPIO
import paho.mqtt.client as mqtt

# GPIO 설정
GPIO.setmode(GPIO.BCM)
GPIO_TRIGGER = 23
GPIO_ECHO = 24
GPIO.setup(GPIO_TRIGGER, GPIO.OUT)
GPIO.setup(GPIO_ECHO, GPIO.IN)
GPIO.output(GPIO_TRIGGER, False)

# MQTT 설정
MQTT_BROKER = "your_broker_address"
MQTT_PORT = 1883
MQTT_TOPIC = "home/height"

# 키 저장용 딕셔너리
heights = {}

# 초음파 센서 거리 측정 함수
def measure():
    GPIO.output(GPIO_TRIGGER, True)
    time.sleep(0.00001)
    GPIO.output(GPIO_TRIGGER, False)

    start = time.time()
    while GPIO.input(GPIO_ECHO) == 0:
        start = time.time()

    while GPIO.input(GPIO_ECHO) == 1:
        stop = time.time()

    elapsed = stop - start
    distance = (elapsed * 34300) / 2
    return distance

def measure_average():
    distances = []
    for _ in range(5):
        distance = measure()
        distances.append(distance)
        time.sleep(0.2)
    
    if max(distances) - min(distances) < 2.0:
        return sum(distances) / len(distances)
    else:
        return None

# MQTT 콜백 함수
def on_connect(client, userdata, flags, rc):
    print("Connected with result code " + str(rc))
    client.subscribe(MQTT_TOPIC)

def on_message(client, userdata, msg):
    user_id = msg.payload.decode()
    print(f"Received user ID: {user_id}")

    height = measure_average()
    if height:
        height = 200 - height  # 센서가 2m 높이에 설치되어 있으므로 키 계산
        heights[user_id] = height
        print(f"Height of user {user_id}: {height} cm")
        client.publish(MQTT_TOPIC, f"User {user_id} height: {height} cm")
    else:
        print("Measurement error. Try again.")
        client.publish(MQTT_TOPIC, "Measurement error. Try again.")

# MQTT 클라이언트 설정
client = mqtt.Client()
client.on_connect = on_connect
client.on_message = on_message

client.connect(MQTT_BROKER, MQTT_PORT, 60)

# MQTT 클라이언트 루프 시작
client.loop_forever()

# 종료 시 GPIO 정리
GPIO.cleanup()
