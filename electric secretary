from __future__ import print_function
import time
import paho.mqtt.client as mqtt
import RPi.GPIO as GPIO

# 초음파 센서 설정
GPIO.setmode(GPIO.BCM)
GPIO_TRIGGER = 23
GPIO_ECHO = 24

GPIO.setup(GPIO_TRIGGER, GPIO.OUT)
GPIO.setup(GPIO_ECHO, GPIO.IN)
GPIO.output(GPIO_TRIGGER, False)

# MQTT 설정
broker_address = "broker.hivemq.com"
topic = "smartphone/personal_id"

# MQTT 콜백 함수
def on_connect(client, userdata, flags, rc):
    print("Connected with result code " + str(rc))
    client.subscribe(topic)

def on_message(client, userdata, msg):
    personal_id = msg.payload.decode()
    print(f"Received personal ID: {personal_id}")
    height = measure_height()
    if height is not None:
        print(f"Measured height for {personal_id}: {height:.2f} cm")
        # 여기에 개인의 키를 저장하는 로직 추가
    else:
        print("Failed to measure height consistently.")

def measure():
    GPIO.output(GPIO_TRIGGER, True)
    time.sleep(0.00001)
    GPIO.output(GPIO_TRIGGER, False)

    start = time.time()
    while GPIO.input(GPIO_ECHO) == 0:
        start = time.time()

    while GPIO.input(GPIO_ECHO) == 1:
        stop = time.time()

    elapsed = stop - start
    distance = (elapsed * 34300) / 2
    return distance

def measure_average():
    distances = [measure() for _ in range(5)]
    return sum(distances) / len(distances)

def measure_height():
    measurements = []
    for _ in range(5):
        height = 200 - measure_average()  # 센서 높이 200cm에서 측정된 거리를 뺌
        measurements.append(height)
        time.sleep(0.2)
    
    # 측정값들의 차이가 2cm 미만인지 확인
    if max(measurements) - min(measurements) < 2:
        return sum(measurements) / len(measurements)
    else:
        return None

# MQTT 클라이언트 설정 및 연결
client = mqtt.Client()
client.on_connect = on_connect
client.on_message = on_message

client.connect(broker_address, 1883, 60)
client.loop_forever()

# 프로그램 종료 시 GPIO 정리
GPIO.cleanup()
